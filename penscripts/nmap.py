import subprocess
import click


@click.group()
def cmd():
    pass


@cmd.command()
@click.option("-i", "--ip", help="Ip address to target")
def full_fast(ip):
    return _full_fast(ip)


def _full_fast(ip):
    nmap_full_fast = f"sudo nmap -Pn -n -v -sS -p- -T5 -oG nmap-full-fast_{ip} {ip}"
    subprocess.run(nmap_full_fast.split())
    print(f"nmap scan of {ip} is done")


@cmd.command()
@click.option("-i", "--ip", help="Ip to parse ports info for")
def parse_ports_from_fast(ip):
    ports = _parse_ports_from_fast(ip)
    if len(ports) > 0:
        res = ",".join(ports)
        print(res)
        return
    print("no ports found")
    return


def _parse_ports_from_fast(ip):
    filename = f"nmap-full-fast_{ip}"

    ports_line = ""
    with open(filename, "rt") as file:
        for line in file.readlines():
            if line.startswith("#"):
                continue
            if "Host" in line and "Ports" in line:
                ports_line = line
                break

    if ports_line == "":
        print(f"no port info found for {ip}")
        return []

    _, portsinfo = ports_line.split("Ports: ")
    splt = portsinfo.split("Ignored State:")
    if len(splt) > 1:
        portsinfo = splt[0]

    ports_extensive = portsinfo.split(", ")
    ports = [p.split("/")[0] for p in ports_extensive]

    return ports


@cmd.command()
@click.option("-p", "--protocol_name", help="Protocol name to filter for")
@click.option(
    "--port_output_path", type=click.Path(), help="Path to port output file to process."
)
def parse_protocol(protocol_name, port_output_path):
    return _parse_protocol_ports_from_ports_output(port_output_path, protocol_name)


def _parse_protocol_ports_from_ports_output(port_output_name, protocol_name):
    filename = port_output_name
    ports_line = ""
    with open(filename, "rt") as file:
        for line in file.readlines():
            if line.startswith("#"):
                continue
            if "Host" in line and "Ports" in line:
                ports_line = line
                break

    if ports_line == "":
        print(f"no port info found in {port_output_name}")
        return []

    _, portsinfo = ports_line.split("Ports: ")

    ports_extensive = portsinfo.split(", ")
    [print(p) for p in ports_extensive]
    protocol_ports = [p.split("/")[0] for p in ports_extensive if protocol_name in p]
    print(protocol_ports)

    return protocol_ports


@cmd.command()
@click.option("-i", "--ip", help="Ip address to target")
@click.option("-p", "--ports", help="Ports to scan, comma separated without space")
def port_scan(ip, ports):
    return _port_scan(ip, ports)


def _port_scan(ip, ports):
    nmap_port_scan = f"sudo nmap -Pn -n -v -sT -A -p {ports} -oG nmap-ports-{ip} {ip}"
    subprocess.run(nmap_port_scan.split())
    print(f"nmap port scan of {ip} is done")


@cmd.command()
@click.option(
    "--protocol_names",
    help="Names of protocols to parse from port output, comma separated.",
)
@click.option(
    "--port_output_path", type=click.Path(), help="Path to port output file to process."
)
def parse_protocols(protocol_names, port_output_path):
    protocols = protocol_names.split(",")
    for p in protocols:
        found_ports = _parse_protocol_ports_from_ports_output(port_output_path, p)
        output = "\n".join(found_ports)
        filename = port_output_path.replace("ports", f"{p}-ports")
        with open(filename, "w") as file:
            file.write(output)

    return


@cmd.command()
@click.option("--ip", help="Ip address to target")
def fast_into_ports(ip):
    _full_fast(ip)
    ports = _parse_ports_from_fast(ip)
    if len(ports) == 0:
        print(f"no ports were found, not performing a port scan on {ip}")
        return

    portsstring = ",".join(ports)
    _port_scan(ip, portsstring)


if __name__ == "__main__":
    cmd()
